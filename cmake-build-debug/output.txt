CONSTTK const 1
INTTK int 1
IDENFR N 1
ASSIGN = 1
INTCON 510 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA , 1
IDENFR M 1
ASSIGN = 1
MINU - 1
<UnaryOp>
INTCON 520 1
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA , 1
IDENFR KK 1
ASSIGN = 1
MINU - 1
<UnaryOp>
INTCON 1 1
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ; 1
<ConstDecl>
CONSTTK const 2
INTTK int 2
IDENFR NN 2
ASSIGN = 2
INTCON 55 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA , 2
IDENFR MM 2
ASSIGN = 2
INTCON 2222 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ; 2
<ConstDecl>
CONSTTK const 3
INTTK int 3
IDENFR K 3
ASSIGN = 3
MINU - 3
<UnaryOp>
INTCON 24 3
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ; 3
<ConstDecl>
CONSTTK const 4
INTTK int 4
IDENFR a_3 4
LBRACK [ 4
INTCON 2 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 4
ASSIGN = 4
LBRACE { 4
INTCON 4 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA , 4
INTCON 5 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE } 4
<ConstInitVal>
<ConstDef>
COMMA , 4
IDENFR a_4 4
LBRACK [ 4
INTCON 2 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 4
LBRACK [ 4
INTCON 2 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 4
ASSIGN = 4
LBRACE { 4
LBRACE { 4
INTCON 899 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA , 4
INTCON 99 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE } 4
<ConstInitVal>
COMMA , 4
LBRACE { 4
INTCON 1222 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA , 4
INTCON 25555 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE } 4
<ConstInitVal>
RBRACE } 4
<ConstInitVal>
<ConstDef>
SEMICN ; 4
<ConstDecl>
CONSTTK const 5
INTTK int 5
IDENFR a_1 5
LBRACK [ 5
INTCON 2 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 5
ASSIGN = 5
LBRACE { 5
INTCON 1 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA , 5
INTCON 2 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE } 5
<ConstInitVal>
<ConstDef>
COMMA , 5
IDENFR a_2 5
LBRACK [ 5
INTCON 1 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 5
LBRACK [ 5
INTCON 1 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 5
ASSIGN = 5
LBRACE { 5
LBRACE { 5
INTCON 2 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE } 5
<ConstInitVal>
RBRACE } 5
<ConstInitVal>
<ConstDef>
SEMICN ; 5
<ConstDecl>
INTTK int 7
IDENFR a 7
LBRACK [ 7
INTCON 510 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 7
<VarDef>
COMMA , 7
IDENFR b 7
LBRACK [ 7
INTCON 510 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 7
LBRACK [ 7
INTCON 510 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 7
<VarDef>
COMMA , 7
IDENFR n 7
<VarDef>
COMMA , 7
IDENFR m 7
<VarDef>
SEMICN ; 7
<VarDecl>
INTTK int 8
IDENFR xxxx 8
<VarDef>
COMMA , 8
IDENFR yyyy 8
<VarDef>
SEMICN ; 8
<VarDecl>
INTTK int 9
IDENFR t 9
ASSIGN = 9
INTCON 1234 9
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA , 9
IDENFR u 9
ASSIGN = 9
INTCON 2345 9
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 9
<VarDecl>
INTTK int 10
IDENFR d 10
LBRACK [ 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 10
LBRACK [ 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 10
ASSIGN = 10
LBRACE { 10
LBRACE { 10
INTCON 1 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 10
INTCON 3 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 10
INTCON 4 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 10
<InitVal>
COMMA , 10
LBRACE { 10
INTCON 3 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 10
INTCON 5 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 10
INTCON 4 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 10
INTCON 1 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 10
<InitVal>
RBRACE } 10
<InitVal>
<VarDef>
SEMICN ; 10
<VarDecl>
INTTK int 11
IDENFR tmp_0 11
LBRACK [ 11
INTCON 5 11
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 11
ASSIGN = 11
LBRACE { 11
INTCON 0 11
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 11
INTCON 1 11
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 11
INTCON 2 11
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 11
INTCON 3 11
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 11
INTCON 4 11
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 11
<InitVal>
<VarDef>
SEMICN ; 11
<VarDecl>
VOIDTK void 13
<FuncType>
IDENFR pr 13
LPARENT ( 13
RPARENT ) 13
LBRACE { 13
PRINTFTK printf 14
LPARENT ( 14
STRCON "20373447\n" 14
RPARENT ) 14
SEMICN ; 14
<Stmt>
RETURNTK return 15
SEMICN ; 15
<Stmt>
RBRACE } 16
<Block>
<FuncDef>
VOIDTK void 18
<FuncType>
IDENFR nonsense 18
LPARENT ( 18
RPARENT ) 18
LBRACE { 18
SEMICN ; 19
<Stmt>
SEMICN ; 20
<Stmt>
RETURNTK return 21
SEMICN ; 21
<Stmt>
RBRACE } 22
<Block>
<FuncDef>
VOIDTK void 24
<FuncType>
IDENFR matrix 24
LPARENT ( 24
RPARENT ) 24
LBRACE { 24
INTTK int 25
IDENFR m 25
LBRACK [ 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 25
LBRACK [ 25
INTCON 4 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 25
ASSIGN = 25
LBRACE { 25
LBRACE { 25
MINU - 25
<UnaryOp>
INTCON 1 25
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 25
INTCON 3 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 25
INTCON 4 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV / 25
INTCON 5 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD % 25
INTCON 6 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 25
MINU - 25
<UnaryOp>
INTCON 1 25
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 25
INTCON 3 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 25
INTCON 4 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 25
LPARENT ( 25
INTCON 1 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 25
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 25
INTCON 3 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 25
INTCON 4 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 25
INTCON 1 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 25
INTCON 3 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 25
INTCON 4 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 25
<InitVal>
COMMA , 25
LBRACE { 25
INTCON 100 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV / 25
INTCON 10 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV / 25
INTCON 10 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 25
LPARENT ( 25
MINU - 25
<UnaryOp>
INTCON 1 25
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 25
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 25
LPARENT ( 25
INTCON 1 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 25
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 25
LPARENT ( 25
INTCON 3 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 25
INTCON 5 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 25
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 25
INTCON 1 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 25
<InitVal>
RBRACE } 25
<InitVal>
<VarDef>
COMMA , 25
IDENFR m1 25
LBRACK [ 25
INTCON 3 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 25
ASSIGN = 25
LBRACE { 25
INTCON 1 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 25
MINU - 25
<UnaryOp>
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 25
INTCON 3 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 25
<InitVal>
<VarDef>
COMMA , 25
IDENFR m2 25
LBRACK [ 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 25
LBRACK [ 25
INTCON 2 25
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 25
<VarDef>
SEMICN ; 25
<VarDecl>
INTTK int 26
IDENFR tu 26
ASSIGN = 26
IDENFR t 26
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 26
IDENFR u 26
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 26
<VarDecl>
IDENFR tu 27
<LVal>
ASSIGN = 27
IDENFR t 27
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 27
IDENFR u 27
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 27
<Stmt>
IDENFR tmp_0 28
LBRACK [ 28
INTCON 0 28
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 28
<LVal>
ASSIGN = 28
INTCON 5 28
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 28
INTCON 5 28
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 28
INTCON 1 28
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 28
<Stmt>
IDENFR m 29
LBRACK [ 29
INTCON 0 29
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 29
LBRACK [ 29
INTCON 0 29
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 29
<LVal>
ASSIGN = 29
INTCON 134 29
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD % 29
INTCON 100 29
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 29
MINU - 29
<UnaryOp>
INTCON 1 29
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 29
<Stmt>
RETURNTK return 30
SEMICN ; 30
<Stmt>
RBRACE } 31
<Block>
<FuncDef>
VOIDTK void 33
<FuncType>
IDENFR logic 33
LPARENT ( 33
RPARENT ) 33
LBRACE { 33
INTTK int 34
IDENFR i 34
ASSIGN = 34
INTCON 0 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA , 34
IDENFR j 34
ASSIGN = 34
INTCON 0 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 34
<VarDecl>
IFTK if 35
LPARENT ( 35
IDENFR i 35
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LEQ <= 35
IDENFR j 35
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 35
LBRACE { 35
IDENFR i 36
<LVal>
ASSIGN = 36
IDENFR j 36
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 36
<Stmt>
RBRACE } 37
<Block>
<Stmt>
<Stmt>
IFTK if 38
LPARENT ( 38
IDENFR i 38
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GEQ >= 38
IDENFR j 38
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 38
LBRACE { 38
IDENFR i 39
<LVal>
ASSIGN = 39
IDENFR j 39
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 39
<Stmt>
RBRACE } 40
<Block>
<Stmt>
<Stmt>
IFTK if 41
LPARENT ( 41
IDENFR i 41
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 41
INTCON 100 41
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND && 41
IDENFR j 41
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GRE > 41
INTCON 100 41
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 41
LBRACE { 41
RBRACE } 43
<Block>
<Stmt>
<Stmt>
IFTK if 44
LPARENT ( 44
IDENFR i 44
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL == 44
INTCON 0 44
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND && 44
IDENFR j 44
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ != 44
INTCON 0 44
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 44
LBRACE { 44
RBRACE } 46
<Block>
<Stmt>
<Stmt>
IFTK if 47
LPARENT ( 47
IDENFR i 47
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL == 47
INTCON 0 47
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND && 47
NOT ! 47
<UnaryOp>
IDENFR j 47
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 47
LBRACE { 47
PRINTFTK printf 48
LPARENT ( 48
STRCON "YeG1\n" 48
RPARENT ) 48
SEMICN ; 48
<Stmt>
RBRACE } 49
<Block>
<Stmt>
<Stmt>
IFTK if 50
LPARENT ( 50
NOT ! 50
<UnaryOp>
IDENFR i 50
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR || 50
IDENFR j 50
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 50
LBRACE { 50
PRINTFTK printf 51
LPARENT ( 51
STRCON "YeG2\n" 51
RPARENT ) 51
SEMICN ; 51
<Stmt>
RBRACE } 52
<Block>
<Stmt>
<Stmt>
IFTK if 53
LPARENT ( 53
IDENFR i 53
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR || 53
NOT ! 53
<UnaryOp>
IDENFR j 53
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 53
LBRACE { 53
PRINTFTK printf 54
LPARENT ( 54
STRCON "YeG3\n" 54
RPARENT ) 54
SEMICN ; 54
<Stmt>
RBRACE } 55
<Block>
<Stmt>
<Stmt>
IFTK if 56
LPARENT ( 56
NOT ! 56
<UnaryOp>
IDENFR i 56
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR || 56
NOT ! 56
<UnaryOp>
IDENFR j 56
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 56
LBRACE { 56
PRINTFTK printf 57
LPARENT ( 57
STRCON "YeG4\n" 57
RPARENT ) 57
SEMICN ; 57
<Stmt>
RBRACE } 58
<Block>
<Stmt>
<Stmt>
IFTK if 59
LPARENT ( 59
NOT ! 59
<UnaryOp>
IDENFR i 59
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND && 59
NOT ! 59
<UnaryOp>
IDENFR j 59
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 59
LBRACE { 59
PRINTFTK printf 60
LPARENT ( 60
STRCON "YeG5\n" 60
RPARENT ) 60
SEMICN ; 60
<Stmt>
RBRACE } 61
<Block>
<Stmt>
<Stmt>
IFTK if 62
LPARENT ( 62
NOT ! 62
<UnaryOp>
IDENFR i 62
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ != 62
IDENFR j 62
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 62
LBRACE { 62
IDENFR i 63
<LVal>
ASSIGN = 63
IDENFR j 63
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 63
<Stmt>
RBRACE } 64
<Block>
<Stmt>
<Stmt>
IFTK if 65
LPARENT ( 65
IDENFR i 65
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ != 65
NOT ! 65
<UnaryOp>
IDENFR j 65
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 65
LBRACE { 65
IDENFR j 66
<LVal>
ASSIGN = 66
IDENFR i 66
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 66
<Stmt>
RBRACE } 67
<Block>
<Stmt>
ELSETK else 68
LBRACE { 68
IDENFR j 69
<LVal>
ASSIGN = 69
IDENFR i 69
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 69
PLUS + 69
<UnaryOp>
MINU - 69
<UnaryOp>
PLUS + 69
<UnaryOp>
IDENFR i 69
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
MULT * 69
INTCON 100 69
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV / 69
INTCON 10 69
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD % 69
INTCON 10 69
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 69
LPARENT ( 69
MINU - 69
<UnaryOp>
INTCON 1 69
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 69
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 69
<Stmt>
RBRACE } 70
<Block>
<Stmt>
<Stmt>
RETURNTK return 71
SEMICN ; 71
<Stmt>
RBRACE } 72
<Block>
<FuncDef>
INTTK int 74
<FuncType>
IDENFR getInt 74
LPARENT ( 74
RPARENT ) 74
LBRACE { 74
INTTK int 75
IDENFR a 75
<VarDef>
SEMICN ; 75
<VarDecl>
IDENFR a 76
<LVal>
ASSIGN = 76
GETINTTK getint 76
LPARENT ( 76
RPARENT ) 76
SEMICN ; 76
<Stmt>
RETURNTK return 77
IDENFR a 77
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 77
<Stmt>
RBRACE } 78
<Block>
<FuncDef>
VOIDTK void 80
<FuncType>
IDENFR prd 80
LPARENT ( 80
INTTK int 80
IDENFR d 80
LBRACK [ 80
RBRACK ] 80
LBRACK [ 80
INTCON 2 80
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 80
<FuncFParam>
COMMA , 80
INTTK int 80
IDENFR x 80
<FuncFParam>
COMMA , 80
INTTK int 80
IDENFR a 80
LBRACK [ 80
RBRACK ] 80
<FuncFParam>
<FuncFParams>
RPARENT ) 80
LBRACE { 80
INTTK int 81
IDENFR i 81
ASSIGN = 81
INTCON 0 81
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA , 81
IDENFR j 81
ASSIGN = 81
INTCON 0 81
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 81
<VarDecl>
WHILETK while 82
LPARENT ( 82
IDENFR i 82
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GEQ >= 82
INTCON 0 82
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 82
LBRACE { 82
PRINTFTK printf 83
LPARENT ( 83
STRCON "%d\n" 83
COMMA , 83
IDENFR d 83
LBRACK [ 83
IDENFR i 83
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 83
LBRACK [ 83
IDENFR j 83
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 83
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 83
SEMICN ; 83
<Stmt>
IDENFR j 84
<LVal>
ASSIGN = 84
IDENFR j 84
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 84
INTCON 1 84
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 84
<Stmt>
IFTK if 85
LPARENT ( 85
IDENFR j 85
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL == 85
INTCON 2 85
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 85
LBRACE { 85
IDENFR j 86
<LVal>
ASSIGN = 86
INTCON 0 86
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 86
<Stmt>
IDENFR i 87
<LVal>
ASSIGN = 87
IDENFR i 87
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 87
INTCON 1 87
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 87
<Stmt>
RBRACE } 88
<Block>
<Stmt>
<Stmt>
IFTK if 89
LPARENT ( 89
IDENFR i 89
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL == 89
INTCON 2 89
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 89
LBRACE { 89
BREAKTK break 90
SEMICN ; 90
<Stmt>
RBRACE } 91
<Block>
<Stmt>
ELSETK else 92
LBRACE { 92
CONTINUETK continue 92
SEMICN ; 92
<Stmt>
RBRACE } 92
<Block>
<Stmt>
<Stmt>
RBRACE } 93
<Block>
<Stmt>
<Stmt>
RETURNTK return 94
SEMICN ; 94
<Stmt>
RBRACE } 95
<Block>
<FuncDef>
VOIDTK void 97
<FuncType>
IDENFR f1 97
LPARENT ( 97
INTTK int 97
IDENFR x 97
<FuncFParam>
<FuncFParams>
RPARENT ) 97
LBRACE { 97
PRINTFTK printf 98
LPARENT ( 98
STRCON "%d" 98
COMMA , 98
IDENFR x 98
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 98
SEMICN ; 98
<Stmt>
RBRACE } 99
<Block>
<FuncDef>
VOIDTK void 100
<FuncType>
IDENFR f2 100
LPARENT ( 100
INTTK int 100
IDENFR d 100
LBRACK [ 100
RBRACK ] 100
LBRACK [ 100
INTCON 1 100
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 100
INTCON 1 100
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 100
<FuncFParam>
<FuncFParams>
RPARENT ) 100
LBRACE { 100
IDENFR d 101
LBRACK [ 101
INTCON 0 101
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 101
LBRACK [ 101
INTCON 1 101
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 101
<LVal>
ASSIGN = 101
INTCON 10000 101
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 101
<Stmt>
RBRACE } 102
<Block>
<FuncDef>
VOIDTK void 103
<FuncType>
IDENFR f3 103
LPARENT ( 103
INTTK int 103
IDENFR x 103
<FuncFParam>
<FuncFParams>
RPARENT ) 103
LBRACE { 103
SEMICN ; 104
<Stmt>
SEMICN ; 105
<Stmt>
RBRACE } 106
<Block>
<FuncDef>
VOIDTK void 107
<FuncType>
IDENFR f4 107
LPARENT ( 107
INTTK int 107
IDENFR a 107
LBRACK [ 107
RBRACK ] 107
<FuncFParam>
<FuncFParams>
RPARENT ) 107
LBRACE { 107
RBRACE } 109
<Block>
<FuncDef>
VOIDTK void 110
<FuncType>
IDENFR f5 110
LPARENT ( 110
INTTK int 110
IDENFR x 110
<FuncFParam>
COMMA , 110
INTTK int 110
IDENFR y 110
LBRACK [ 110
RBRACK ] 110
<FuncFParam>
<FuncFParams>
RPARENT ) 110
LBRACE { 110
RBRACE } 112
<Block>
<FuncDef>
INTTK int 114
MAINTK main 114
LPARENT ( 114
RPARENT ) 114
LBRACE { 115
IDENFR pr 116
LPARENT ( 116
RPARENT ) 116
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 116
<Stmt>
IDENFR nonsense 117
LPARENT ( 117
RPARENT ) 117
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 117
<Stmt>
IDENFR n 118
<LVal>
ASSIGN = 118
IDENFR getInt 118
LPARENT ( 118
RPARENT ) 118
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 118
<Stmt>
IDENFR m 119
<LVal>
ASSIGN = 119
IDENFR getInt 119
LPARENT ( 119
RPARENT ) 119
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 119
<Stmt>
IDENFR matrix 120
LPARENT ( 120
RPARENT ) 120
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 120
<Stmt>
IDENFR f1 121
LPARENT ( 121
IDENFR n 121
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 121
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 121
<Stmt>
IDENFR f2 122
LPARENT ( 122
IDENFR d 122
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 122
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 122
<Stmt>
IDENFR f3 123
LPARENT ( 123
IDENFR n 123
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 123
IDENFR m 123
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 123
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 123
<Stmt>
IDENFR f3 124
LPARENT ( 124
IDENFR tmp_0 124
LBRACK [ 124
INTCON 0 124
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 124
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 124
IDENFR tmp_0 124
LBRACK [ 124
INTCON 1 124
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 124
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 124
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 124
<Stmt>
IDENFR f3 125
LPARENT ( 125
IDENFR a_2 125
LBRACK [ 125
INTCON 0 125
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 125
LBRACK [ 125
INTCON 0 125
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 125
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 125
IDENFR a_2 125
LBRACK [ 125
INTCON 0 125
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 125
LBRACK [ 125
INTCON 0 125
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 125
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 125
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 125
<Stmt>
IDENFR f3 126
LPARENT ( 126
IDENFR a_2 126
LBRACK [ 126
INTCON 0 126
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 126
LBRACK [ 126
INTCON 0 126
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 126
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 126
IDENFR tmp_0 126
LBRACK [ 126
INTCON 0 126
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 126
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 126
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 126
<Stmt>
IDENFR f3 127
LPARENT ( 127
IDENFR tmp_0 127
LBRACK [ 127
INTCON 0 127
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 127
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 127
IDENFR n 127
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 127
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 127
<Stmt>
IDENFR f3 128
LPARENT ( 128
IDENFR a_2 128
LBRACK [ 128
INTCON 0 128
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 128
LBRACK [ 128
INTCON 0 128
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 128
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 128
IDENFR m 128
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 128
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 128
<Stmt>
IDENFR f4 130
LPARENT ( 130
IDENFR d 130
LBRACK [ 130
INTCON 1 130
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 130
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 130
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 130
<Stmt>
IDENFR f5 131
LPARENT ( 131
IDENFR tmp_0 131
LBRACK [ 131
INTCON 0 131
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 131
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 131
IDENFR d 131
LBRACK [ 131
INTCON 0 131
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 131
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 131
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 131
<Stmt>
IDENFR f5 132
LPARENT ( 132
IDENFR n 132
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 132
IDENFR tmp_0 132
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 132
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 132
<Stmt>
IDENFR logic 133
LPARENT ( 133
RPARENT ) 133
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 133
<Stmt>
INTTK int 134
IDENFR a 134
ASSIGN = 134
IDENFR n 134
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 134
<VarDecl>
INTTK int 135
IDENFR b 135
ASSIGN = 135
IDENFR m 135
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 135
<VarDecl>
IDENFR a 136
<LVal>
ASSIGN = 136
IDENFR a 136
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 136
MINU - 136
<UnaryOp>
PLUS + 136
<UnaryOp>
IDENFR a 136
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 136
<Stmt>
IDENFR b 137
<LVal>
ASSIGN = 137
IDENFR b 137
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 137
PLUS + 137
<UnaryOp>
MINU - 137
<UnaryOp>
IDENFR a 137
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 137
<Stmt>
IFTK if 138
LPARENT ( 138
IDENFR a 138
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL == 138
IDENFR b 138
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 138
LBRACE { 138
IDENFR a 139
<LVal>
ASSIGN = 139
INTCON 1 139
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 139
<Stmt>
IDENFR b 140
<LVal>
ASSIGN = 140
INTCON 1 140
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 140
<Stmt>
RBRACE } 141
<Block>
<Stmt>
ELSETK else 142
IFTK if 142
LPARENT ( 142
IDENFR a 142
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LEQ <= 142
IDENFR b 142
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 142
LBRACE { 142
IDENFR a 143
<LVal>
ASSIGN = 143
INTCON 1 143
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 143
<Stmt>
IDENFR b 144
<LVal>
ASSIGN = 144
INTCON 2 144
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 144
<Stmt>
RBRACE } 145
<Block>
<Stmt>
ELSETK else 146
LBRACE { 146
IDENFR a 147
<LVal>
ASSIGN = 147
INTCON 2 147
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 147
<Stmt>
IDENFR b 148
<LVal>
ASSIGN = 148
INTCON 1 148
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 148
<Stmt>
RBRACE } 149
<Block>
<Stmt>
<Stmt>
<Stmt>
IFTK if 150
LPARENT ( 150
NOT ! 150
<UnaryOp>
IDENFR a 150
<LVal>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 150
LBRACE { 150
IDENFR a 151
<LVal>
ASSIGN = 151
INTCON 10000 151
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 151
<Stmt>
RBRACE } 152
<Block>
<Stmt>
ELSETK else 153
LBRACE { 153
RBRACE } 155
<Block>
<Stmt>
<Stmt>
PRINTFTK printf 156
LPARENT ( 156
STRCON "%d -- %d\n" 156
COMMA , 156
IDENFR n 156
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 156
IDENFR m 156
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 156
SEMICN ; 156
<Stmt>
IDENFR prd 157
LPARENT ( 157
IDENFR d 157
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 157
INTCON 100 157
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 157
IDENFR tmp_0 157
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 157
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 157
<Stmt>
PRINTFTK printf 158
LPARENT ( 158
STRCON "%d\n" 158
COMMA , 158
IDENFR n 158
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 158
IDENFR m 158
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 158
SEMICN ; 158
<Stmt>
PRINTFTK printf 159
LPARENT ( 159
STRCON "%d\n" 159
COMMA , 159
IDENFR n 159
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 159
IDENFR m 159
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 159
SEMICN ; 159
<Stmt>
PRINTFTK printf 160
LPARENT ( 160
STRCON "%d\n" 160
COMMA , 160
IDENFR n 160
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 160
IDENFR m 160
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 160
SEMICN ; 160
<Stmt>
PRINTFTK printf 161
LPARENT ( 161
STRCON "%d\n" 161
COMMA , 161
IDENFR n 161
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD % 161
IDENFR m 161
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 161
SEMICN ; 161
<Stmt>
RETURNTK return 162
INTCON 0 162
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 162
<Stmt>
RBRACE } 163
<Block>
<MainFuncDef>
<CompUnit>
